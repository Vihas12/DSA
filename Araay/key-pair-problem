

  // 1Q key pair problem  || two sum problem

  Description of that Question:----->> In this promblem (key pair problem) firstly we have to select the  target value(which is present in array) 
                                       given by the user and we have to find out the sum of the two element in the array is  equal to the target value.
                               


Code:----->>


#include <iostream>
#include <algorithm>

using namespace std;

int main()
{
    //*****(1st Method to solve this proble but it has poor time Complexity)

    int arr[6] = {1, 2, 3, 4, 5, 6};
    int size = 6;

    int target = 11;

    for (int i = 0; i < size; i++)
    {

        for (int j = i + 1; j < size; j++)
        {
            if (arr[i] + arr[j] == target)
            {
                cout << "the two number are" << arr[i] << " "
                     << arr[j] << endl;
            }
        }
    };

   1) // #######but It is not the best solution for that Q ..
   2)// ###### The time complixity of this code is O(n^2)...that time complixity is not good for the problem
   3)// ####### Know to over come this problem of time complixity of the code and for good solution we will make use of two pointer apporach






    //******(2nd Method to solve this proble (two pointer apporach) and  it has good time Complexity)
    
    int arr[6] = {5, 2, 6, 3, 1, 4};
    int size = 6;
    int target = 11;

    sort(arr, arr + size); 

    1)// ###### we use sort function to sort the array in the ascending order and for that we have to include the header file of the algorithm(<algorithm>) library.
    2)//### arr: This is the pointer to the first element of the array to be sorted.
    3)//## arr + size: points to the element immediately after the last element of the array.
    4)//#### the time complixity of the sort function is O(nlogn).

    int l = arr[0];
    int h = arr[size - 1];

    while (l < h)
    {
        if (arr[l] + arr[h] == target)
        {
            cout << "the two number are" << arr[l] << " " << arr[h] << endl;
            break;
        }
        else if (arr[l] + arr[h] < target)
        {
            l++;
        }
        else if (arr[l] + arr[h] > target)
        {
            h--;
        }
    }

    return 0;
}
